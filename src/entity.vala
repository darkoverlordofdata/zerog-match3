/**
 * Entitas Generated Entity & Components for shmupwarz
 *
 * do not edit this file
 */
namespace Entitas 
{
	public struct Entity 
	{			   	
											/* Core component: */  
		public int 			id;				/* sequentially assigned id# */
		public string 		name; 			/* display name */
		public int 			pool;			/* pool entities by type */
		public uint64 		mask;			/* HasComponent bit array */
		public Transform 	transform;		/* core game object */

        /**
         * Subscribe to Component Added Event
         * type Event.EntityChanged 
		 */
		public Event.EntityChanged		onComponentAdded;

        /**
         * Subscribe to Component Removed Event
         * type Event.EntityChanged 
		 */
		public Event.EntityChanged		onComponentRemoved;

        /**
         * Subscribe to Entity Released Event
         * type Event.EntityReleased 
		 */
		public Event.EntityReleased		onEntityReleased;

        /**
         * Subscribe to Component Replaced Event
         * type Event.ComponentReplaced 
		 */
		public Event.ComponentReplaced	onComponentReplaced;

		/* ============================ */
		public Background? 	background; 	/* flag */
		public Bullet? 		bullet;			/* flag */
		public Enemy1? 		enemy1;			/* flag */
		public Enemy2? 		enemy2;			/* flag */
		public Enemy3? 		enemy3;			/* flag */
		public Expires? 	expires;		/* value */
		public Health? 		health;			/* value */
		public Hud? 		hud;			/* value */
		public Layer? 		layer;			/* value */
		public Player? 		player;			/* flag */
		public Show?		show;			/* flag */
		public Sound? 		sound;			/* value */
		public Text? 		text;			/* value */
		public Tint? 		tint;			/* value */
		public Tween?		tween;			/* value */
		public Velocity? 	velocity;		/* value */
		/* ============================ */

		public Entity(int id, 
			Event.EntityChanged.Handler? ComponentAddedOrRemoved = null, 
			Event.EntityReleased.Handler? ComponentEntityReleased = null, 
			Event.ComponentReplaced.Handler? ComponentComponentReplaced = null)
		{

			this.id = id;

            onEntityReleased = new Event.EntityReleased();
            onComponentAdded = new Event.EntityChanged();
            onComponentRemoved = new Event.EntityChanged();
            onComponentReplaced = new Event.ComponentReplaced();

			if (ComponentEntityReleased != null)
				onEntityReleased.Add(ComponentEntityReleased);
			if (ComponentAddedOrRemoved != null)
				onComponentAdded.Add(ComponentAddedOrRemoved);
			if (ComponentAddedOrRemoved != null)
				onComponentRemoved.Add(ComponentAddedOrRemoved);
			if (ComponentComponentReplaced != null)
				onComponentReplaced.Add(ComponentComponentReplaced);
		}

        /**
         * Destroy
         *
         */
		public void Destroy() 
		{
			SetActive(false);
		}

        /**
         * HasAnyComponent
         *
         * @param Array<number> indices
         * @return boolean
         */
		public bool HasAnyComponent(int[] indices) 
		{
			foreach (var index in indices)
				if ((POW2[index] & mask) != 0) return true;
			return false;
		}

         /**
          * HasComponent
          *
          * @param number index
          * @return boolean
          */
		public bool HasComponent(int index) 
		{
			return (POW2[index] & mask) != 0;
		}

        /**
         * HasComponents
         *
         * @param Array<number> indices
         * @return boolean
         */
		public bool HasComponents(int[] indices) 
		{
			foreach (var index in indices) 
				if ((POW2[index] & mask) == 0) return false;
			return true;
		}

		public bool IsActive() 
		{
			return (mask & ACTIVE) == ACTIVE;
		}

		public Entity* SetId(int id) 
		{
			this.id = id;
			return &this;
		}

		public Entity* SetName(string name) 
		{
			this.name = name;
			return &this;
		}

		public Entity* SetActive(bool active) 
		{
			if (((mask & ACTIVE) == ACTIVE ) == active) return &this;
			if (active) mask |= ACTIVE;
			else mask ^= ACTIVE;
			return &this;
		}

		public Entity* SetBounds(int x, int y, int w, int h) 
		{
			transform.aabb.x = x;
			transform.aabb.y = y;
			transform.aabb.w = w;
			transform.aabb.h = h;
			return &this;
		}

		public Entity* SetPool(int pool) 
		{
			this.pool = pool;
			return &this;
		}

		public Entity* SetPosition(float x, float y) 
		{
			transform.position.x = x;
			transform.position.y = y;

			if (transform.sprite.centered) 
			{
				transform.aabb.x = (int)(x - transform.aabb.w / 2);
				transform.aabb.y = (int)(y - transform.aabb.h / 2);
			} 
			else 
			{
				transform.aabb.x = (int)x;
				transform.aabb.y = (int)y;
			}
			return &this;
		}

		public Entity* SetScale(float x, float y) 
		{
			transform.scale.x = x;
			transform.scale.y = y;
			return &this;
		}

		public Entity* SetTransform(Sdx.Graphics.Sprite sprite) 
		{
			transform = Transform(sprite);
			return &this;
		}
		
		public string ToString() 
		{
			var sb = new StringBuilder();
			sb.Append(id.ToString())
			.Append("(")
			.Append(name)
			.Append(")");

			for (var i = 1, seperator = false; i <= ComponentString.length; i++) 
			{
				if (HasComponent(i)) 
				{
					if (seperator) sb.Append(", ");
					sb.Append(ComponentString[i]);
					seperator = true;
				}
			}
			return sb.str;
		}


		public Entity* SetBackground(bool value) {
			if (value) {
				background = { true };
				mask |= BACKGROUND;
				//eventHandler.OnEntityChanged(&this, Components.BackgroundComponent, &background);
				onComponentAdded.Dispatch(&this, Components.BackgroundComponent, &background);
			} else {
				var prev = background;
				background = null;
				mask ^= BACKGROUND;
				onComponentRemoved.Dispatch(&this, Components.BackgroundComponent, &prev);
			}
			return &this;
		}

		public bool IsBackground() {
			return (mask & BACKGROUND) == BACKGROUND;
		}

		public Entity* SetBullet(bool value) {
			if (value) {
				bullet = { true };
				mask |= BULLET;
				onComponentAdded.Dispatch(&this, Components.BulletComponent, &bullet);
			} else {
				var prev = bullet;
				bullet = null;
				mask ^= BULLET;
				onComponentRemoved.Dispatch(&this, Components.BulletComponent, &prev);
			}
			return &this;
		}

		public bool IsBullet() {
			return (mask & BULLET)  == BULLET;
		}

		public Entity* SetEnemy1(bool value) {
			if (value) {
				enemy1 = { true };
				mask |= ENEMY1;
				onComponentAdded.Dispatch(&this, Components.Enemy1Component, &enemy1);
			} else {
				var prev = enemy1;
				enemy1 = null;
				mask ^= ENEMY1;
				onComponentRemoved.Dispatch(&this, Components.Enemy1Component, &prev);
			}
			return &this;
		}

		public bool IsEnemy1() {
			return (mask & ENEMY1) == ENEMY1;
		}

		public Entity* SetEnemy2(bool value) {
			if (value) {
				enemy2 = { true };
				mask |= ENEMY2;
				onComponentAdded.Dispatch(&this, Components.Enemy2Component, &enemy2);
			} else {
				var prev = enemy2;
				enemy2 = null;
				mask ^= ENEMY2;
				onComponentRemoved.Dispatch(&this, Components.Enemy2Component, &prev);
			}
			return &this;
		}

		public bool IsEnemy2() {
			return (mask & ENEMY2) == ENEMY2;
		}

		public Entity* SetEnemy3(bool value) {
			if (value) {
				enemy3 = { true };
				mask |= ENEMY3;
				onComponentAdded.Dispatch(&this, Components.Enemy3Component, &enemy3);
			} else {
				var prev = enemy3;
				enemy3 = null;
				mask ^= ENEMY3;
				onComponentRemoved.Dispatch(&this, Components.Enemy3Component, &prev);
			}
			return &this;
		}

		public bool IsEnemy3() {
			return (mask & ENEMY3) == ENEMY3;
		}

		public bool HasExpires() {
			return (mask & EXPIRES) != 0;
		}

		public Entity* AddExpires(float value) {
			if ((mask & EXPIRES) == EXPIRES) throw new Exception.EntityAlreadyHasComponent("Expires");
			expires = { value };
			mask |= EXPIRES;
			onComponentAdded.Dispatch(&this, Components.ExpiresComponent, &expires);
			return &this;
		}

		public Entity* SetExpires(float value) {
			if ((mask & EXPIRES) != EXPIRES) throw new Exception.EntityDoesNotHaveComponent("Expires");
			this.expires.value = value;
			return &this;
		}

		public Entity* RemoveExpires() {
			if ((mask & EXPIRES) != EXPIRES) throw new Exception.EntityDoesNotHaveComponent("Expires");
			var prev = expires;
			expires = null;
			mask ^= EXPIRES;
			onComponentRemoved.Dispatch(&this, Components.ExpiresComponent, &prev);
			return &this;
		}

		public bool HasHealth() {
			return (mask & HEALTH) == HEALTH;
		}

		public Entity* AddHealth(float current, float maximum) { 
			if ((mask & HEALTH) == HEALTH) throw new Exception.EntityAlreadyHasComponent("Health");
			health = { current, maximum };
			mask |= HEALTH;
			onComponentAdded.Dispatch(&this, Components.HealthComponent, &health);
			return &this;
		}

		public Entity* SetHealth(float current, float maximum) {
			if ((mask & HEALTH) != HEALTH) throw new Exception.EntityDoesNotHaveComponent("Health");
			this.health.current = current;
			this.health.maximum = maximum;
			return &this;
		}

		public Entity* RemoveHealth() {
			if ((mask & HEALTH) != HEALTH) throw new Exception.EntityDoesNotHaveComponent("Health");
			var prev = health;
			health = null;
			mask ^= HEALTH;
			onComponentRemoved.Dispatch(&this, Components.HealthComponent, &prev);
			return &this;
		}

		public Entity* SetHud(bool value) {
			if (value) {
				hud = { true };
				mask |= HUD;
				onComponentAdded.Dispatch(&this, Components.HudComponent, &hud);
			} else {
				var prev = hud;
				hud = null;
				mask ^= HUD;
				onComponentRemoved.Dispatch(&this, Components.HudComponent, &prev);
			}
			return &this;
		}

		public bool IsHud() {
			return (mask & HUD) == HUD;
		}


		public bool HasLayer() {
			return (mask & LAYER) == LAYER;
		}

		public Entity* AddLayer(int value) { 
			if ((mask & LAYER) == LAYER) throw new Exception.EntityAlreadyHasComponent("Layer");
			layer = { value };
			mask |= LAYER;
			onComponentAdded.Dispatch(&this, Components.LayerComponent, &layer);
			return &this;
		}

		public Entity* SetLayer(int value) {
			if ((mask & LAYER) != LAYER) throw new Exception.EntityDoesNotHaveComponent("Layer");
			this.layer.value = value;
			return &this;
		}

		public Entity* RemoveLayer() {
			if ((mask & LAYER) != LAYER) throw new Exception.EntityDoesNotHaveComponent("Layer");
			var prev = layer;
			layer = null;
			mask ^= LAYER;
			onComponentRemoved.Dispatch(&this, Components.LayerComponent, &prev);
			return &this;
		}

		public Entity* SetPlayer(bool value) {
			if (value) {
				player = { true };
				mask |= PLAYER;
				onComponentAdded.Dispatch(&this, Components.PlayerComponent, &player);
			} else {
				var prev = player;
				player = null;
				mask ^= PLAYER;
				onComponentRemoved.Dispatch(&this, Components.PlayerComponent, &prev);
			}
			return &this;
		}

		public bool IsPlayer() {
			return (mask & PLAYER) == PLAYER;
		}

		public Entity* SetShow(bool value) {
			if (value) {
				show = { true };
				mask |= SHOW;
				onComponentAdded.Dispatch(&this, Components.ShowComponent, &show);
			} else {
				var prev = show;
				show = null;
				mask ^= SHOW;
				onComponentRemoved.Dispatch(&this, Components.ShowComponent, &prev);
			}
			return &this;
		}

		public bool IsShow() {
			return (mask & SHOW) == SHOW;
		}


		public bool HasSound() {
			return (mask & SOUND) == SOUND;
		}

		public Entity* AddSound(Sdx.Audio.Sound sound) {
			if ((mask & SOUND) == SOUND) throw new Exception.EntityAlreadyHasComponent("Sound");
			this.sound = { sound };
			mask |= SOUND;
			onComponentAdded.Dispatch(&this, Components.SoundComponent, &this.sound);
			return &this;
		}

		public Entity* SetSound(Sdx.Audio.Sound sound) {
			if ((mask & SOUND) != SOUND) throw new Exception.EntityDoesNotHaveComponent("Sound");
			this.sound.sound = sound;
			return &this;
		}

		public Entity* RemoveSound() {
			if ((mask & SOUND) != SOUND) throw new Exception.EntityDoesNotHaveComponent("Sound");
			var prev = sound;
			sound = null;
			mask ^= SOUND;
			onComponentRemoved.Dispatch(&this, Components.SoundComponent, &prev);
			return &this;
		}

		public bool HasText() {
			return (mask & TEXT) == TEXT;
		}

		public Entity* AddText(string text, Sdx.Graphics.Sprite.TextSprite texture) { 
			if ((mask & TEXT) == TEXT) throw new Exception.EntityAlreadyHasComponent("Text");
			this.text = { text, texture };
			mask |= TEXT;
			onComponentAdded.Dispatch(&this, Components.TextComponent, &this.text);
			return &this;
		}

		public Entity* SetText(string text, Sdx.Graphics.Sprite.TextSprite texture) {
			if ((mask & TEXT) != TEXT) throw new Exception.EntityDoesNotHaveComponent("Text");
			this.text.text = text;
			this.text.sprite = texture;
			return &this;
		}

		public Entity* RemoveText() {
			if ((mask & TEXT) != TEXT) throw new Exception.EntityDoesNotHaveComponent("Text");
			var prev = text;
			text = null;
			mask ^= TEXT;
			onComponentRemoved.Dispatch(&this, Components.TextComponent, &prev);
			return &this;
		}

		public bool HasTint() {
			return (mask & TINT) == TINT;
		}

		public Entity* AddTint(int r, int g, int b, int a) {
			if ((mask & TINT) == TINT) throw new Exception.EntityAlreadyHasComponent("Tint");
			tint = { r, g, b, a };
			mask |= TINT;
			onComponentAdded.Dispatch(&this, Components.TintComponent, &tint);
			return &this;
		}

		public Entity* SetTint(int r, int g, int b, int a) {
			if ((mask & TINT) != TINT) throw new Exception.EntityDoesNotHaveComponent("Tint");
			this.tint.r = r;
			this.tint.g = g;
			this.tint.b = b;
			this.tint.a = a;
			return &this;
		}

		public Entity* RemoveTint() {
			if ((mask & TINT)!= TINT) throw new Exception.EntityDoesNotHaveComponent("Tint");
			var prev = tint;
			tint = null;
			mask ^= TINT;
			onComponentRemoved.Dispatch(&this, Components.TintComponent, &prev);
			return &this;
		}

		public bool HasTween() {
			return (mask & TWEEN) == TWEEN;
		}

		public Entity* AddTween(float min, float max, float speed, bool repeat, bool active) { 
			if ((mask & TWEEN) == TWEEN) throw new Exception.EntityAlreadyHasComponent("Tween");
			tween = { min, max, speed, repeat, active };
			mask |= TWEEN;
			onComponentAdded.Dispatch(&this, Components.TweenComponent, &tween);
			return &this;
		}

		public Entity* SetTween(float min, float max, float speed, bool repeat, bool active) {
			if ((mask & TWEEN) != TWEEN) throw new Exception.EntityDoesNotHaveComponent("Tween");
			this.tween.min = min;
			this.tween.max = max;
			this.tween.speed = speed;
			this.tween.repeat = repeat;
			this.tween.active = active;
			return &this;
		}

		public Entity* RemoveTween() {
			if ((mask & TWEEN) != TWEEN) throw new Exception.EntityDoesNotHaveComponent("Tween");
			var prev = tween;
			tween = null;
			mask ^= TWEEN;
			onComponentRemoved.Dispatch(&this, Components.TweenComponent, &prev);
			return &this;
		}

		public bool HasVelocity() {
			return (mask & VELOCITY) == VELOCITY;
		}

		public Entity* AddVelocity(float x, float y) { 
			if ((mask & VELOCITY) == VELOCITY) throw new Exception.EntityAlreadyHasComponent("Velocity");
			velocity = { x, y };
			mask |= VELOCITY;
			onComponentAdded.Dispatch(&this, Components.VelocityComponent, &velocity);
			return &this;
		}

		public Entity* SetVelocity(float x, float y) {
			if ((mask & VELOCITY) != VELOCITY) throw new Exception.EntityDoesNotHaveComponent("Velocity");
			this.velocity.x = x;
			this.velocity.y = y;
			return &this;
		}

		public Entity* RemoveVelocity() {
			if ((mask & VELOCITY) != VELOCITY) throw new Exception.EntityDoesNotHaveComponent("Velocity");
			var prev = velocity;
			velocity = null;
			mask ^= VELOCITY;
			onComponentRemoved.Dispatch(&this, Components.VelocityComponent, &prev);
			return &this;
		}
	}
}
